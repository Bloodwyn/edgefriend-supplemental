@startuml

hide circle

skinparam dpi 200

skinparam tabSize 1

skinparam ArrowColor     DimGrey
skinparam ArrowFontName  DejaVu Serif
skinparam ArrowFontSize  11
skinparam ArrowFontStyle Bold
skinparam ArrowThickness 2

skinparam BackgroundColor Transparent

skinparam ClassFontName  DejaVu Sans Mono
skinparam ClassFontStyle Bold
skinparam ClassFontSize  14
skinparam ClassFontColor White

skinparam ClassAttributeFontName  DejaVu Sans Mono
skinparam ClassAttributeFontStyle Bold
skinparam ClassAttributeFontColor LightGrey

skinparam ClassBackgroundColor #202040

skinparam ClassBorderColor Beige

class Result {
    attributes\t: Attributes
    shapes\t\t\t\t\t: std::vector<Shape>
    materials\t\t: std::vector<Material>
    error\t\t\t\t\t\t: Error
}

class Attributes {
    positions\t: Array<float>
    texcoords\t: Array<float>
    normals\t\t\t: Array<float>
    colors\t\t\t\t: Array<float>
}

class Shape {
    name\t\t\t: std::string
    mesh\t\t\t: Mesh
    lines\t\t: Lines
    points\t: Points
}

class Mesh {
    indices\t\t\t\t\t\t\t\t\t\t\t\t\t: Array<Index>
    num_face_vertices\t\t\t: Array<std::uint8_t>
    material_ids\t\t\t\t\t\t\t\t: Array<std::int32_t>  
    smoothing_group_ids\t: Array<std::uint32_t>
}

class Lines {
    indices\t\t\t\t\t\t\t\t\t\t\t: Array<Index>
    num_line_vertices\t: Array<std::int32_t>
}

class Points {
    indices\t: Array<Index>
}

class Material {
    name\t\t\t\t\t\t\t: std::string
    parameters\t: ParameterTypes
}

class Error {
    code\t\t\t\t\t: std::error_code
    line\t\t\t\t\t: std::string     
    line_num\t: std::size_t
}

class Index {
    position_index\t: int
    texcoord_index\t: int
    normal_index\t\t\t: int
}

Result *-- "1" Attributes #text:SandyBrown
Result *-- "1..*" Shape #text:SandyBrown
Result *-- "0..*  " Material #text:SandyBrown
Result *-- "1       " Error #text:SandyBrown

Shape *-- "0..1" Mesh #text:SandyBrown
Shape *-- "0..1" Lines #text:SandyBrown
Shape *-- "0..1     " Points #text:SandyBrown

hide methods
@enduml

